// <auto-generated />
using System;
using BookShop.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookShop.Infrastructure.Migrations
{
    [DbContext(typeof(BookShopContext))]
    [Migration("20201229183753_UpdateRelations")]
    partial class UpdateRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BookShop")
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BookInfoGenre", b =>
                {
                    b.Property<int>("BookInfosId")
                        .HasColumnType("int");

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.HasKey("BookInfosId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookInfoGenre");
                });

            modelBuilder.Entity("BookShop.Core.Book", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArriveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookInfoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Guid");

                    b.HasIndex("BookInfoId");

                    b.ToTable("Book", "BookShop");
                });

            modelBuilder.Entity("BookShop.Core.BookInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookInfo", "BookShop");
                });

            modelBuilder.Entity("BookShop.Core.Discounts.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discount");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Discount");
                });

            modelBuilder.Entity("BookShop.Core.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genre", "BookShop");
                });

            modelBuilder.Entity("BookShop.Core.Discounts.BookDiscount", b =>
                {
                    b.HasBaseType("BookShop.Core.Discounts.Discount");

                    b.Property<int>("BookInfoId")
                        .HasColumnType("int");

                    b.HasIndex("BookInfoId");

                    b.HasDiscriminator().HasValue("BookDiscount");
                });

            modelBuilder.Entity("BookShop.Core.Discounts.DefectDiscount", b =>
                {
                    b.HasBaseType("BookShop.Core.Discounts.Discount");

                    b.Property<Guid>("BookGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BookGuid");

                    b.HasDiscriminator().HasValue("DefectDiscount");
                });

            modelBuilder.Entity("BookShop.Core.Discounts.GenreDiscount", b =>
                {
                    b.HasBaseType("BookShop.Core.Discounts.Discount");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasIndex("GenreId");

                    b.HasDiscriminator().HasValue("GenreDiscount");
                });

            modelBuilder.Entity("BookInfoGenre", b =>
                {
                    b.HasOne("BookShop.Core.BookInfo", null)
                        .WithMany()
                        .HasForeignKey("BookInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShop.Core.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShop.Core.Book", b =>
                {
                    b.HasOne("BookShop.Core.BookInfo", "BookInfo")
                        .WithMany("Books")
                        .HasForeignKey("BookInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookInfo");
                });

            modelBuilder.Entity("BookShop.Core.Discounts.BookDiscount", b =>
                {
                    b.HasOne("BookShop.Core.BookInfo", "BookInfo")
                        .WithMany("BookDiscounts")
                        .HasForeignKey("BookInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookInfo");
                });

            modelBuilder.Entity("BookShop.Core.Discounts.DefectDiscount", b =>
                {
                    b.HasOne("BookShop.Core.Book", "Book")
                        .WithMany("DefectDiscounts")
                        .HasForeignKey("BookGuid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookShop.Core.Discounts.GenreDiscount", b =>
                {
                    b.HasOne("BookShop.Core.Genre", "Genre")
                        .WithMany("GenreDiscounts")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookShop.Core.Book", b =>
                {
                    b.Navigation("DefectDiscounts");
                });

            modelBuilder.Entity("BookShop.Core.BookInfo", b =>
                {
                    b.Navigation("BookDiscounts");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShop.Core.Genre", b =>
                {
                    b.Navigation("GenreDiscounts");
                });
#pragma warning restore 612, 618
        }
    }
}
